pipeline {
    agent any

    environment {
        IMAGE_TAG = "v${env.BUILD_NUMBER}"
        PROJECT_NAME = "radwasamir"
        APP_PORT = "2222"
        SLACK_EMAIL = "samirradwa188@gmail.com"
        WORKSPACE_PATH = "${WORKSPACE}/insert-update"  // Adjusted workspace path
    }

    stages {
        stage('Checkout SCM') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    extensions: [
                        [
                            $class: 'RelativeTargetDirectory',
                            relativeTargetDir: 'insert-update'
                        ]
                    ],
                    userRemoteConfigs: [[url: 'https://github.com/RadwaSamirr/radwasamir.git']]
                ])
                script {
                    COMMIT_HASH = sh(returnStdout: true, script: 'git -C insert-update rev-parse --short HEAD').trim()
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir('insert-update') {
                        if (!fileExists('Dockerfile')) {
                            error("Dockerfile not found in insert-update directory")
                        }
                        docker.build("${PROJECT_NAME}:${IMAGE_TAG}")
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    dir('insert-update') {
                        sh "docker-compose down || true"
                        sh "IMAGE_TAG=${IMAGE_TAG} APP_PORT=${APP_PORT} docker-compose up -d"
                    }
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    sleep(time: 10, unit: 'SECONDS')
                    sh "curl -I http://localhost:${APP_PORT} || true"
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            emailext(
                to: "${SLACK_EMAIL}",
                subject: "SUCCESS: ${PROJECT_NAME} deployed on port ${APP_PORT}",
                body: """
                Deployment successful!
                Project: ${PROJECT_NAME}:${IMAGE_TAG}
                Running on: http://localhost:${APP_PORT}
                Commit: ${COMMIT_HASH}
                Build URL: ${env.BUILD_URL}
                """
            )
        }
        failure {
            emailext(
                to: "${SLACK_EMAIL}",
                subject: "FAILED: ${PROJECT_NAME} build #${env.BUILD_NUMBER}",
                body: """
                Build failed for ${PROJECT_NAME}
                Build URL: ${env.BUILD_URL}
                Please check the Jenkins logs for details.
                """
            )
        }
    }
}

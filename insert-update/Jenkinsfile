pipeline {
    agent any

    environment {
        // Configuration
        IMAGE_TAG = "v${env.BUILD_NUMBER}"
        PROJECT_NAME = "radwasamir"
        APP_PORT = "2222"
        PROJECT_DIR = "insert-update"  // Single source of truth for directory
        
        // Notification settings
        SLACK_CHANNEL = "#internship"
        NOTIFICATION_EMAIL = "samirradwa188@gmail.com"
    }

    stages {
        stage('Single Checkout') {
            steps {
                // Single checkout with clean workspace
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    extensions: [
                        [
                            $class: 'RelativeTargetDirectory',
                            relativeTargetDir: "${PROJECT_DIR}"
                        ],
                        [
                            $class: 'CleanBeforeCheckout'
                        ]
                    ],
                    userRemoteConfigs: [[url: 'https://github.com/RadwaSamirr/radwasamir.git']]
                ])
                
                script {
                    env.GIT_COMMIT = sh(returnStdout: true, script: "git -C ${PROJECT_DIR} rev-parse --short HEAD").trim()
                    echo "Workspace contents:"
                    sh "ls -la ${PROJECT_DIR}"
                }
            }
        }

        stage('Verify Files') {
            steps {
                script {
                    // Use absolute path to check files
                    def dockerfilePath = "${WORKSPACE}/${PROJECT_DIR}/Dockerfile"
                    def composePath = "${WORKSPACE}/${PROJECT_DIR}/docker-compose.yml"
                    
                    if (!fileExists(dockerfilePath)) {
                        error("Dockerfile not found at: ${dockerfilePath}")
                    }
                    if (!fileExists(composePath)) {
                        error("docker-compose.yml not found at: ${composePath}")
                    }
                    echo "All required files found"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir(PROJECT_DIR) {
                        echo "Building Docker image..."
                        docker.build("${PROJECT_NAME}:${IMAGE_TAG}")
                        
                        // Save image to filesystem
                        sh "mkdir -p docker_images"
                        sh "docker save -o docker_images/${PROJECT_NAME}-${IMAGE_TAG}.tar ${PROJECT_NAME}:${IMAGE_TAG}"
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    dir(PROJECT_DIR) {
                        echo "Deploying version ${IMAGE_TAG}"
                        sh "docker-compose down || true"
                        sh "IMAGE_TAG=${IMAGE_TAG} APP_PORT=${APP_PORT} docker-compose up -d"
                        
                        // Verify deployment
                        sleep(time: 10, unit: 'SECONDS')
                        sh "curl -I http://localhost:${APP_PORT} || true"
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
            archiveArtifacts artifacts: "${PROJECT_DIR}/docker_images/*.tar", onlyIfSuccessful: true
        }
        success {
            script {
                // Basic email if Slack fails
                mail(
                    to: NOTIFICATION_EMAIL,
                    subject: "SUCCESS: ${PROJECT_NAME} ${IMAGE_TAG} deployed",
                    body: "Deployed successfully to port ${APP_PORT}\nBuild: ${env.BUILD_URL}"
                )
                
                // Try Slack if credentials exist
                try {
                    slackSend(
                        channel: SLACK_CHANNEL,
                        color: 'good',
                        message: "Deployed ${PROJECT_NAME}:${IMAGE_TAG} to port ${APP_PORT}"
                    )
                } catch (err) {
                    echo "Slack notification failed, using email only"
                }
            }
        }
        failure {
            script {
                mail(
                    to: NOTIFICATION_EMAIL,
                    subject: "FAILED: ${PROJECT_NAME} build #${env.BUILD_NUMBER}",
                    body: "Build failed: ${env.BUILD_URL}"
                )
            }
        }
    }
}

pipeline {
    agent any

    environment {
        IMAGE_TAG = "v${env.BUILD_NUMBER}"
        PROJECT_NAME = "radwasamir"
        APP_PORT = "2222"
        SLACK_CHANNEL = "#internship"  // Your Slack channel
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout Code') {
            steps {
                checkout scm
                
                script {
                    echo "Repository structure:"
                    sh "ls -la"
                    echo "insert-update contents:"
                    sh "ls -la insert-update || true"
                }
            }
        }

        stage('Verify Files') {
            steps {
                script {
                    if (!fileExists("insert-update/Dockerfile")) {
                        error("""
                        ‚ùå Missing Dockerfile!
                        insert-update contents:
                        ${sh(script: "ls -la insert-update", returnStdout: true)}
                        """)
                    }
                    
                    if (!fileExists("insert-update/docker-compose.yml")) {
                        error("‚ùå Missing docker-compose.yml in insert-update")
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir("insert-update") {
                        docker.build("${PROJECT_NAME}:${IMAGE_TAG}")
                    }
                }
            }
        }

        stage('Deploy Application') {
            steps {
                script {
                    dir("insert-update") {
                        sh """
                        docker-compose down || true
                        IMAGE_TAG=${IMAGE_TAG} APP_PORT=${APP_PORT} docker-compose up -d
                        """
                        
                        // Enhanced health check
                        def health = sh(
                            script: "curl -s -o /dev/null -w '%{http_code}' http://localhost:${APP_PORT} || echo '000'",
                            returnStdout: true
                        ).trim()
                        echo "Health check HTTP status: ${health}"
                        
                        if (health != "200") {
                            error("Deployment health check failed (Status: ${health})")
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            script {
                echo """
                üéâ Successfully deployed ${PROJECT_NAME}:${IMAGE_TAG}
                Access URL: http://your-server:${APP_PORT}
                """
                
                // Slack notification
                slackSend(
                    channel: env.SLACK_CHANNEL,
                    color: "good",
                    message: """‚úÖ Deployment Success!
                    |Project: ${PROJECT_NAME}:${IMAGE_TAG}
                    |Port: ${APP_PORT}
                    |Commit: ${sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()}
                    |<${env.BUILD_URL}|View Build>""".stripMargin()
                )
            }
        }
        failure {
            script {
                echo """
                ‚ùå Deployment failed!
                Troubleshooting:
                1. Check Dockerfile in insert-update/
                2. Verify docker-compose.yml
                3. Inspect logs: ${env.BUILD_URL}
                """
                
                // Slack notification
                slackSend(
                    channel: env.SLACK_CHANNEL,
                    color: "danger",
                    message: """‚ùå Deployment Failed!
                    |Project: ${PROJECT_NAME}
                    |Build: #${env.BUILD_NUMBER}
                    |<${env.BUILD_URL}|Investigate>""".stripMargin()
                )
            }
        }
    }
}

pipeline {
    agent any

    environment {
        IMAGE_TAG = "v${env.BUILD_NUMBER}"
        PROJECT_NAME = "radwasamir"
        APP_PORT = "2222"
        SLACK_CHANNEL = "#project"  // Using your specified channel
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout Code') {
            steps {
                checkout scm
                script {
                    echo "Verified repository structure:"
                    sh "ls -la insert-update/"
                }
            }
        }

        stage('Verify Files') {
            steps {
                script {
                    if (!fileExists("insert-update/Dockerfile")) {
                        error("❌ Dockerfile missing in insert-update/")
                    }
                    if (!fileExists("insert-update/docker-compose.yml")) {
                        error("❌ docker-compose.yml missing in insert-update/")
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir("insert-update") {
                        docker.build("${PROJECT_NAME}:${IMAGE_TAG}")
                    }
                }
            }
        }

        stage('Deploy Application') {
            steps {
                script {
                    dir("insert-update") {
                        // Stop and clean previous deployment
                        sh "docker-compose down --remove-orphans || true"
                        
                        // Start new containers with 30s timeout
                        sh """
                        IMAGE_TAG=${IMAGE_TAG} APP_PORT=${APP_PORT} \
                        docker-compose up -d --build --force-recreate
                        """
                        
                        // Extended health check with retries
                        def healthy = false
                        def retries = 3
                        def waitTime = 10
                        
                        while (retries > 0 && !healthy) {
                            sleep(time: waitTime, unit: 'SECONDS')
                            def status = sh(
                                script: "curl -s -o /dev/null -w '%{http_code}' http://localhost:${APP_PORT} || echo '000'",
                                returnStdout: true
                            ).trim()
                            
                            if (status == "200") {
                                healthy = true
                                echo "✅ Health check passed (Status: 200)"
                            } else {
                                retries--
                                echo "⚠️ Health check failed (Status: ${status}), ${retries} retries left"
                                sh "docker-compose logs --tail=20 || true"
                            }
                        }
                        
                        if (!healthy) {
                            error("❌ Application failed to start after multiple retries")
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
            script {
                // Archive logs if build failed
                if (currentBuild.result == 'FAILURE') {
                    dir("insert-update") {
                        sh "docker-compose logs --no-color > docker_logs.txt || true"
                        archiveArtifacts artifacts: 'docker_logs.txt', allowEmptyArchive: true
                    }
                }
            }
        }
        success {
            script {
                def commitHash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                slackSend(
                    channel: env.SLACK_CHANNEL,
                    color: "good",
                    message: """✅ Deployment Successful!
                    |*Project*: ${PROJECT_NAME}:${IMAGE_TAG}
                    |*Commit*: ${commitHash}
                    |*Port*: ${APP_PORT}
                    |*Access*: http://your-server:${APP_PORT}
                    |<${env.BUILD_URL}|View Build Details>""".stripMargin()
                )
            }
        }
        failure {
            script {
                slackSend(
                    channel: env.SLACK_CHANNEL,
                    color: "danger",
                    message: """❌ Deployment Failed!
                    |*Project*: ${PROJECT_NAME}
                    |*Build*: #${env.BUILD_NUMBER}
                    |*Logs*: <${env.BUILD_URL}/artifact/docker_logs.txt|Download>
                    |<${env.BUILD_URL}|Investigate>""".stripMargin()
                )
            }
        }
    }
}

pipeline {
    agent any

    environment {
        IMAGE_TAG = "v${env.BUILD_NUMBER}"
        PROJECT_NAME = "radwasamir"
        APP_PORT = "2222"
        SLACK_CHANNEL = "#project"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout Code') {
            steps {
                checkout scm
                script {
                    echo "Repository structure:"
                    sh "ls -la"
                    echo "insert-update contents:"
                    sh "ls -la insert-update || true"
                }
            }
        }

        stage('Verify Files') {
            steps {
                script {
                    if (!fileExists("insert-update/Dockerfile")) {
                        error("""
                        ❌ Missing Dockerfile!
                        insert-update contents:
                        ${sh(script: "ls -la insert-update", returnStdout: true)}
                        """)
                    }
                    if (!fileExists("insert-update/docker-compose.yml")) {
                        error("❌ Missing docker-compose.yml in insert-update")
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir("insert-update") {
                        sh "docker build -t ${PROJECT_NAME}:${IMAGE_TAG} ."
                    }
                }
            }
        }

        stage('Deploy Application') {
            steps {
                script {
                    dir("insert-update") {
                        sh """
                        docker-compose down || true
                        IMAGE_TAG=${IMAGE_TAG} APP_PORT=${APP_PORT} docker-compose up -d
                        """
                        
                        // Health check with retries
                        retry(3) {
                            sleep 10
                            def health = sh(
                                script: "curl -s -o /dev/null -w '%{http_code}' http://localhost:${APP_PORT} || echo '000'",
                                returnStdout: true
                            ).trim()
                            if (health != "200") {
                                error("Deployment health check failed (Status: ${health})")
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            script {
                slackSend(
                    channel: env.SLACK_CHANNEL,
                    color: "good",
                    message: """✅ Deployment Success!
                    |Project: ${PROJECT_NAME}:${IMAGE_TAG}
                    |Port: ${APP_PORT}
                    |<${env.BUILD_URL}|View Build>""".stripMargin(),
                    tokenCredentialId: 'slack',
                    teamDomain: 'internship-dkk8872'
                )
            }
        }
        failure {
            script {
                slackSend(
                    channel: env.SLACK_CHANNEL,
                    color: "danger",
                    message: """❌ Deployment Failed!
                    |Project: ${PROJECT_NAME}
                    |Build: #${env.BUILD_NUMBER}
                    |<${env.BUILD_URL}|Investigate>""".stripMargin(),
                    tokenCredentialId: 'slack',
                    teamDomain: 'internship-dkk8872'
                )
            }
        }
    }
}

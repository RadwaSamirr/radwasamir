pipeline {
    agent any

    environment {
        IMAGE_TAG = "v${env.BUILD_NUMBER}"
        PROJECT_NAME = "radwasamir"
        APP_PORT = "2222"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout Code') {
            steps {
                checkout scm
                
                script {
                    // Debug: Show exact repository structure
                    echo "Repository contents:"
                    sh "ls -la"
                    echo "insert-update contents:"
                    sh "ls -la insert-update || true"
                }
            }
        }

        stage('Verify Files') {
            steps {
                script {
                    // Check files using exact paths
                    if (!fileExists("insert-update/Dockerfile")) {
                        error("""
                        ‚ùå Dockerfile not found!
                        insert-update directory contents:
                        ${sh(script: "ls -la insert-update", returnStdout: true)}
                        """)
                    }
                    
                    if (!fileExists("insert-update/docker-compose.yml")) {
                        error("docker-compose.yml not found in insert-update")
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir("insert-update") {
                        // Build and tag the image
                        docker.build("${PROJECT_NAME}:${IMAGE_TAG}")
                    }
                }
            }
        }

        stage('Deploy Application') {
            steps {
                script {
                    dir("insert-update") {
                        // Stop old containers and deploy new version
                        sh """
                        docker-compose down || true
                        IMAGE_TAG=${IMAGE_TAG} APP_PORT=${APP_PORT} docker-compose up -d
                        """
                        
                        // Verify deployment
                        sleep(time: 10, unit: 'SECONDS')
                        def status = sh(
                            script: "curl -s -o /dev/null -w '%{http_code}' http://localhost:${APP_PORT} || true",
                            returnStdout: true
                        ).trim()
                        echo "Application status check returned HTTP ${status}"
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo """
            üéâ Successfully deployed ${PROJECT_NAME}:${IMAGE_TAG}
            Website running on port ${APP_PORT}
            Build details: ${env.BUILD_URL}
            """
        }
        failure {
            echo """
            ‚ùå Deployment failed!
            Troubleshooting steps:
            1. Check Dockerfile exists in insert-update/
            2. Verify docker-compose.yml is configured
            3. Check logs at ${env.BUILD_URL}
            """
        }
    }
    post {
    success {
        slackSend(
            channel: "#project",
            color: "good",
            message: "‚úÖ Success! Deployed ${PROJECT_NAME}:${IMAGE_TAG} on port ${APP_PORT}\n<${env.BUILD_URL}|View Build>"
        )
    }
    failure {
        slackSend(
            channel: "#project",
            color: "danger",
            message: "‚ùå Failed! Check <${env.BUILD_URL}|build logs>"
        )
    }
}
}
